import asyncio
import os
import sys
from logging.config import fileConfig

from sqlalchemy.ext.asyncio import AsyncEngine
from alembic import context

# üëá –ü–æ–¥–∫–ª—é—á–∞–µ–º –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))

# üëá –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏–∑ –ø—Ä–æ–µ–∫—Ç–∞
from database import DATABASE_URL
from models import Base
target_metadata = Base.metadata

# Alembic Config
config = context.config
fileConfig(config.config_file_name)

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º URL –∏–∑ database.py
config.set_main_option("sqlalchemy.url", DATABASE_URL)

# üëá –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–≤—Ç–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
target_metadata = Base.metadata

# ----------- üîß –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –º–∏–≥—Ä–∞—Ü–∏–∏ -----------
def run_migrations_offline():
    """Run migrations in 'offline' mode."""
    url = config.get_main_option("sqlalchemy.url")
    context.configure(
        url=url,
        target_metadata=target_metadata,
        literal_binds=True,
        dialect_opts={"paramstyle": "named"},
        compare_type=True,  # –í–∫–ª—é—á–∏—Ç—å —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ç–∏–ø–æ–≤ –∫–æ–ª–æ–Ω–æ–∫
    )

    with context.begin_transaction():
        context.run_migrations()


def do_run_migrations(connection):
    context.configure(connection=connection, target_metadata=target_metadata, compare_type=True)

    with context.begin_transaction():
        context.run_migrations()


async def run_migrations_online():
    """Run migrations in 'online' mode (asyncpg engine)."""
    from sqlalchemy.ext.asyncio import create_async_engine

    connectable = create_async_engine(DATABASE_URL, poolclass=None)

    async with connectable.connect() as connection:
        await connection.run_sync(do_run_migrations)

    await connectable.dispose()


# üëá –í—ã–±–∏—Ä–∞–µ–º —Ä–µ–∂–∏–º –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç CLI
if context.is_offline_mode():
    run_migrations_offline()
else:
    asyncio.run(run_migrations_online())
