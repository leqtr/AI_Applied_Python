from aiogram import Bot, Dispatcher, types
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import Message, FSInputFile, InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery
from aiogram.filters import Command
from states import ProfileSetup, FoodLogging #, CustomGoal
from utils import get_city_lat_lon, get_weather, get_food_calories, generate_progress_plot, text_to_emoji, calculate_bmr_with_goal, calculate_water_intake, get_calories_burned
from config import BOT_TOKEN
from middleware import LoggingMiddleware

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(storage=MemoryStorage())
dp.message.middleware(LoggingMiddleware())
dp.callback_query.middleware(LoggingMiddleware())


### —Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –ø–∞–º—è—Ç–∏
users = {}

################################################################################################–Ω–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞
@dp.message(Command("start"))
async def start(message: Message):
    await message.reply("Hello! I'm your Good Habit Bot. üòä\nI'll help you track your water intake, meals, and exercises. \nUse /set_profile to get started!")

################################################################################################—Å—Ç–∞—Ä—Ç–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø—Ä–æ—Ñ–∏–ª—è
### –Ω–∞—á–∞–ª–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è
@dp.message(Command("set_profile"))
async def set_profile(message: Message,
                      state: FSMContext):
    sex_keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="Female",
                                  callback_data="female")],
            [InlineKeyboardButton(text="Male", callback_data="male")]
        ]
    )
    await message.reply("Please select your sex:", reply_markup=sex_keyboard)

### –ø–æ–ª
@dp.callback_query(lambda c: c.data in ["male", "female"])
async def handle_sex_selection(callback: types.CallbackQuery, state: FSMContext):
    sex = callback.data
    await state.update_data(sex=sex)

    await callback.message.answer("Enter your age:")
    await state.set_state(ProfileSetup.age)
    await callback.answer()

### –≤–æ–∑—Ä–∞—Å—Ç
@dp.message(ProfileSetup.age)
async def process_age(message: Message,
                      state: FSMContext):
    try:
        age = int(message.text)
        if age < 10 or age > 100:  ### –≤–æ–∑—Ä–∞—Å—Ç –æ—Ç 10 –¥–æ 100 –ª–µ—Ç
            raise ValueError
    except ValueError:
        await message.reply("‚ö†Ô∏è Please enter a valid age between 10 and 100 years.")
        return None

    await state.update_data(age=age)
    await message.reply("Enter your height (cm):")
    await state.set_state(ProfileSetup.height)

### —Ä–æ—Å—Ç
@dp.message(ProfileSetup.height)
async def process_height(message: Message,
                         state: FSMContext):
    try:
        height = int(message.text)
        if height < 80 or height > 250:  ### —Ä–æ—Å—Ç –æ—Ç 80 –¥–æ 250 —Å–º
            raise ValueError
    except ValueError:
        await message.reply("‚ö†Ô∏è Please enter a valid height between 80 and 250 cm.")
        return None

    await state.update_data(height=height)
    await message.reply("Enter your current weight:")
    await state.set_state(ProfileSetup.current_weight)

### —Ç–µ–∫—É—â–∏–π –≤–µ—Å
@dp.message(ProfileSetup.current_weight)
async def process_current_weight(message: Message,
                         state: FSMContext):
    try:
        current_weight = int(message.text)
        if current_weight < 30 or current_weight > 500:  ### –≤–µ—Å –æ—Ç 30 –¥–æ 500 –∫–≥
            raise ValueError
    except ValueError:
        await message.reply("‚ö†Ô∏è Please enter a valid weight between 30 and 500 kg.")
        return None

    await state.update_data(current_weight=current_weight)
    await message.reply("Enter your target weight:")
    await state.set_state(ProfileSetup.target_weight)

### —Ü–µ–ª–µ–≤–æ–π –≤–µ—Å
@dp.message(ProfileSetup.target_weight)
async def process_target_weight(message: Message,
                      state: FSMContext):
    try:
        target_weight = int(message.text)
        if target_weight < 30 or target_weight > 500:  ### –≤–µ—Å –æ—Ç 30 –¥–æ 500 –∫–≥
            raise ValueError
    except ValueError:
        await message.reply("‚ö†Ô∏è Please enter a valid weight between 30 and 500 kg.")
        return None

    await state.update_data(target_weight=target_weight)

    activity_keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="Minimal Activity - Sedentary lifestyle (no exercise)", callback_data="activity_1")],
            [InlineKeyboardButton(text="Light Activity - 1-3 workouts per week", callback_data="activity_2")],
            [InlineKeyboardButton(text="Moderate Activity - 3-5 workouts per week", callback_data="activity_3")],
            [InlineKeyboardButton(text="High Activity - 6-7 workouts per week", callback_data="activity_4")],
            [InlineKeyboardButton(text="Extreme Activity - Athlete, physical job", callback_data="activity_5")]
        ]
    )
    await message.reply("Please select your activity level:", reply_markup=activity_keyboard)

### —É—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
@dp.callback_query(lambda c: c.data.startswith("activity_"))
async def handle_activity_selection(callback: types.CallbackQuery, state: FSMContext):
    activity_level = int(callback.data.split("_")[1])
    await state.update_data(activity_level=activity_level)

    await callback.message.answer(f"‚úÖ Activity level saved! Now, enter your city:")
    await state.set_state(ProfileSetup.city)
    await callback.answer()

### –≥–æ—Ä–æ–¥
@dp.message(ProfileSetup.city)
async def process_city(message: Message, state: FSMContext):
    city = message.text
    try:
        ### –≤–∞–ª–∏–¥–∞—Ü–∏—è, —á—Ç–æ –≤–≤–µ–¥–µ–Ω–Ω—ã–π –≥–æ—Ä–æ–¥ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        lat, lon = get_city_lat_lon(city)
    except Exception as e:
        await message.reply(f"‚ö†Ô∏è The city '{city}' was not found. Please try again.")
        return None

    data = await state.get_data()
    user_id = message.from_user.id
    sex = data['sex']
    age = data['age']
    height = data['height']
    current_weight = data['current_weight']
    target_weight = data['target_weight']
    activity_level = data['activity_level']

    water_goal = calculate_water_intake(current_weight = current_weight,
                                        activity_level = activity_level)
    calorie_goal = calculate_bmr_with_goal(sex = sex,
                                           age = age,
                                           height = height,
                                           current_weight = current_weight,
                                           target_weight = target_weight,
                                           activity_level = activity_level)
    users[user_id] = {
        "sex": sex,
        "age": age,
        "height": height,
        "current_weight": current_weight,
        "target_weight": target_weight,
        "activity_level": activity_level,
        "city": city,
        "logged_water": 0,
        "logged_calories": 0,
        "water_goal": water_goal,
        "calorie_goal": calorie_goal,
        'calories_burned': 0
    }
    await message.reply("‚úÖ Profile saved! Use /help to find out about bot functions.")
    await state.clear()

################################################################################################—Å–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É
### —Å–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É
@dp.message(Command("help"))
async def help_command(message: Message):
    help_text = (
        "üìö *Bot Commands Guide:*\n\n"
        "1Ô∏è‚É£ */set\\_profile* ‚Äì Set up your profile by entering your parameters\\.\n\n"
        
        "2Ô∏è‚É£ */set\\_water\\_goal \\<goal\\_in\\_ml\\>* ‚Äì Set a custom daily water intake goal \\(if not set, bot calculates the norm itself\\)\\. \nExample: `/set_water_goal 3000`\\.\n"
        "3Ô∏è‚É£ */set\\_calorie\\_goal \\<goal\\_in\\_kcal\\>* ‚Äì Set a custom daily calorie consumption goal \\(if not set, bot calculates the norm itself\\)\\. \nExample: `/set_calorie_goal 2500`\\.\n\n"
        
        "4Ô∏è‚É£ */log\\_food \\<food\\_name\\>* ‚Äì Log the food you eat and track your calorie intake\\. \nExample: `/log_food banana`\\.\n"
        "5Ô∏è‚É£ */log\\_water \\<amount\\_in\\_ml\\>* ‚Äì Log the amount of water you drink\\. \nExample: `/log_water 500`\\.\n"
        "6Ô∏è‚É£ */log\\_workout \\<activity\\> \\<duration\\_in\\_minutes\\>* ‚Äì Log your workout and calories burned\\. \nExample: `/log_workout running 30`\\.\n\n"
        
        "7Ô∏è‚É£ */check\\_progress* ‚Äì Check your progress for water intake, calorie consumption, and calories burned during workouts\\.\n\n"
        
        "üí° *Note:* Ensure to set up your profile first using /set\\_profile to use most of the features\\.\n"
        "üöÄ Stay healthy and hydrated\\! üíßüçΩüí™"
    )
    await message.reply(help_text, parse_mode="MarkdownV2")

################################################################################################–ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ü–µ–ª–∏ –ø–æ –≤–æ–¥–µ –∏ –∫–∞–ª–æ—Ä–∏—è–º
### –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–ª–∏ –ø–æ –≤–æ–¥–µ
@dp.message(Command("set_water_goal"))
async def set_water_goal(message: Message):
    user_id = message.from_user.id
    if user_id not in users:
        await message.reply("‚ö†Ô∏è You need to set up your profile first. Use /set_profile.")
        return None

    try:
        water_goal = int(message.text.split(maxsplit=1)[-1])
        if water_goal < 0 or water_goal > 10000:  ### –ø–æ—Ç—Ä–µ–±–ª—è–µ–º–æ–µ –∫–æ–ª-–≤–æ –≤–æ–¥—É –±–æ–ª—å—à–µ 0 –∏ –º–µ–Ω—å—à–µ 10
            raise ValueError
    except (ValueError, IndexError):
        await message.reply("‚ö†Ô∏è Please enter a valid amount of water (between 0 and 10000 ml). Example: /set_water_goal 5000")
        return None

    users[user_id]["water_goal"] = water_goal
    await message.reply(f"‚úÖ Your daily water goal has been set to {water_goal} ml.")

### –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–ª–∏ –ø–æ –∫–∞–ª–æ—Ä–∏—è–º
@dp.message(Command("set_calorie_goal"))
async def set_water_goal(message: Message):
    user_id = message.from_user.id
    if user_id not in users:
        await message.reply("‚ö†Ô∏è You need to set up your profile first. Use /set_profile.")
        return None

    try:
        calorie_goal = int(message.text.split(maxsplit=1)[-1])
        if calorie_goal < 0 or calorie_goal > 10000:
            raise ValueError
    except (ValueError, IndexError):
        await message.reply("‚ö†Ô∏è Please enter a valid amount between 1000 and 10000 kcal.")
        return None

    users[user_id]["calorie_goal"] = calorie_goal
    await message.reply(f"‚úÖ Your daily calorie goal has been set to {calorie_goal} kcal.")

################################################################################################–ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –µ–¥—ã,–≤–æ–¥—ã,—Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
### –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –µ–¥—ã
@dp.message(Command("log_food"))
async def log_food(message: Message, state: FSMContext):
    user_id = message.from_user.id
    if user_id not in users:
        await message.reply("‚ö†Ô∏è You need to set up your profile first. Use /set_profile.")
        return None

    food_name = message.text.split(maxsplit=1)[-1]
    calories = get_food_calories(food_name)['calories']

    if calories is None:
        await message.reply(f"‚ö†Ô∏è Sorry, I couldn't find any information on '{food_name}'. Please try a different food.")
        return None

    emoji_message = text_to_emoji(food_name) if text_to_emoji(food_name) != '' else 'üçΩ'
    await state.update_data(food_name=food_name, calories=calories)
    await message.reply(emoji_message + f" {food_name} ‚Äî {calories} kcal per 100g. How many grams did you consume?")
    await state.set_state(FoodLogging.food_weight)

@dp.message(FoodLogging.food_weight)
async def process_food_weight(message: Message, state: FSMContext):
    user_id = message.from_user.id
    data = await state.get_data()
    try:
        weight = int(message.text)
    except ValueError:
        await message.reply("Please enter a valid number.")
        return

    total_calories = round((weight / 100) * data["calories"])
    users[user_id]["logged_calories"] += total_calories

    await message.reply(f"‚úÖ Logged: {total_calories:.1f} kcal for {data['food_name']}.")
    await state.clear()

### –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–æ–¥—ã
@dp.message(Command("log_water"))
async def log_water(message: Message):
    user_id = message.from_user.id
    if user_id not in users:
        await message.reply("‚ö†Ô∏è You need to set up your profile first. Use /set_profile.")
        return None

    try:
        water_amount = int(message.text.split(maxsplit=1)[-1])
        if water_amount < 0 or water_amount > 10000:  ### –ø–æ—Ç—Ä–µ–±–ª—è–µ–º–æ–µ –∫–æ–ª-–≤–æ –≤–æ–¥—É –±–æ–ª—å—à–µ 0 –∏ –º–µ–Ω—å—à–µ 10
            raise ValueError
    except (ValueError, IndexError):
        await message.reply("‚ö†Ô∏è Please enter a valid amount of water (between 0 and 10000 ml). Example: /log_water 500")
        return None

    users[user_id]["logged_water"] += water_amount
    total_water = users[user_id]["logged_water"]

    await message.reply(f"‚úÖ Logged {water_amount} ml of water! Total water intake: {total_water} ml.")

### –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
@dp.message(Command("log_workout"))
async def log_workout(message: Message):
    user_id = message.from_user.id
    if user_id not in users:
        await message.reply("‚ö†Ô∏è You need to set up your profile first. Use /set_profile.")
        return None

    try:
        mess = message.text.split(maxsplit=1)
        parts = mess[1].rsplit(maxsplit=1)
        activity = parts[0].lower()  ### –≤–∏–¥ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
        duration = int(parts[1])  ### –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ –º–∏–Ω—É—Ç–∞—Ö

        if duration <= 0 or duration > 600:
            raise ValueError

    except (ValueError, IndexError):
        await message.reply("‚ö†Ô∏è Please use the correct format: /log_workout <activity> <duration in minutes>. Example: /log_workout running 30")
        return None

    calories_burned = get_calories_burned(activity, duration)
    if calories_burned is None:
        await message.reply(f"‚ö†Ô∏è Sorry, I couldn't find information for the activity '{activity}'. Please try a different workout.")
        return None

    ### –æ–±–Ω–æ–≤–ª—è–µ–º —Å–∂–µ–Ω–Ω—ã–µ –∫–∞–ª–æ—Ä–∏–∏ –∏ –Ω–æ–≤—É—é –Ω–æ—Ä–º—É –≤–æ–¥—ã
    users[user_id]["calories_burned"] = round(users[user_id].get("calories_burned", 0) + calories_burned)
    additional_water = int((duration / 30) * 500)  ### 500 –º–ª –≤–æ–¥—ã –∑–∞ –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
    users[user_id]["water_goal"] += additional_water
    emoji_message = text_to_emoji(activity) if text_to_emoji(activity) != '' else 'üí™'

    await message.reply(emoji_message + f" {activity} for {duration} minutes ‚Äî {calories_burned:.0f} kcal burned.\n"
                       f"üíß Stay hydrated! Drink additional {additional_water} ml of water.")

################################################################################################–ø—Ä–æ–≥—Ä–µ—Å—Å
### –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
@dp.message(Command("check_progress"))
async def check_progress(message: Message):
    user_id = message.from_user.id
    if user_id not in users:
        await message.reply("‚ö†Ô∏è You need to set up your profile first. Use /set_profile.")
        return None

    user = users[user_id]
    temp = get_weather(user["city"])
    temp_water_bonus = 500 if temp and temp > 25 else 0

    water_goal = user["water_goal"] + temp_water_bonus
    calorie_goal = user["calorie_goal"]

    generate_progress_plot(user["logged_water"], water_goal, user["logged_calories"], calorie_goal)
    photo = FSInputFile("progress.png")

    await message.answer_photo(photo, caption=f"üå° Temperature in the city {user['city']}: {temp}¬∞C\n\n"
                                              f"üìà Progress:\n\n"
                                              f"üíß Water intake:\n"
                                              f"üíß {user['logged_water']} ml out of {water_goal} ml\n"
                                              f"üíß {int(100.0*user['logged_water']/water_goal)}% of the goal\n"
                                              f"üíß {water_goal - user['logged_water']} ml left\n\n"
                                              
                                              f"üçΩ Calories consumed:\n"
                                              f"üçΩ {user['logged_calories']} kcal out of {calorie_goal} kcal\n"
                                              f"üçΩ {int(100.0*user['logged_calories']/calorie_goal)}% of the goal\n"
                                              f"üçΩ {calorie_goal - user['logged_calories']} kcal left\n\n"
                                              
                                              f"üí™ Calories burned:\n"
                                              f"üí™ {user['calories_burned']} kcal burned during workout\n"
                                              )

################################################################################################–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    import asyncio
    asyncio.run(main())

################################################################################################—á–µ–∫–ª–∏—Å—Ç
# –ö—Ä–∏—Ç–µ—Ä–∏–∏ –æ—Ü–µ–Ω–∏–≤–∞–Ω–∏—è:
# ‚úÖ –†–µ–∞–ª–∏–∑–æ–≤–∞–Ω —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç —Å –ø–æ–º–æ—â—å—é –≤—ã–±—Ä–∞–Ω–Ω–æ–π –±–∏–±–ª–∏–æ—Ç–µ–∫–∏, –∫–æ—Ç–æ—Ä—ã–π –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∫–∞–∫ –º–∏–Ω–∏–º—É–º –ø—Ä–æ—Å—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç ‚Äì 2 –±–∞–ª–ª–∞.
# ‚úÖ –†–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤ –ø—Ä–æ–≥—Ä–∞–º–º–µ ‚Äì 1 –±–∞–ª–ª.
# ‚úÖ –†–µ–∞–ª–∏–∑–æ–≤–∞–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ä–∞—Å—á—ë—Ç –≤–æ–¥—ã –∏ –∫–∞–ª–æ—Ä–∏–π ‚Äì 0.3 –±–∞–ª–ª–∞. –ï—Å–ª–∏ –≤ –∑–∞–¥–∞–Ω–∏–∏ –µ—Å—Ç—å –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ—Å—Ç—å, —Ä–µ—à–∏—Ç–µ –µ–µ –ø–æ —Å–≤–æ–µ–º—É –≤—ã–±–æ—Ä—É.
# ‚úÖ –£—Å–ø–µ—à–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ OpenWeatherMap –∏–ª–∏ –∏–Ω–æ–≥–æ API –¥–ª—è –ø–æ–≥–æ–¥—ã (—ç—Ç–æ –≤—ã —É–º–µ–µ—Ç–µ –∏–∑ –î–ó 1) –∏ OpenFoodFacts –∏–ª–∏ –∏–Ω–æ–≥–æ —Å–ø–æ—Å–æ–±–∞ —Ä–∞—Å—á–µ—Ç–∞ –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç–∏ ‚Äì 0.2 –±–∞–ª–ª–∞.
# ‚úÖ –ë–æ—Ç –ø–æ–∑–≤–æ–ª—è–µ—Ç —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞—Ç—å –≤–æ–¥—É, –µ–¥—É –∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏, –∏ –∫–∞–∂–¥—ã–π –∏–∑ —ç—Ç–∏—Ö –º–µ—Ç–æ–¥–æ–≤ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ—Ç –≤—Å–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏ –¥–∞–Ω–Ω—ã–µ ‚Äì –ø–æ 1.5 –±–∞–ª–ª–∞ –∑–∞ –∫–∞–∂–¥—ã–π, –≤—Å–µ–≥–æ 4.5 –±–∞–ª–ª–∞.
# # ‚úÖ –≤–æ–¥—É
# # ‚úÖ –µ–¥—É
# # ‚úÖ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
# ‚úÖ –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω –º–µ—Ç–æ–¥, –≤–æ–∑–≤—Ä–∞—â–∞—é—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ –≤–æ–¥–µ –∏ –∫–∞–ª–æ—Ä–∏—è–º ‚Äì 1 –±–∞–ª–ª.
# ‚úÖ –î–µ–ø–ª–æ–π –±–æ—Ç–∞ –Ω–∞ –æ–Ω–ª–∞–π–Ω-—Å–µ—Ä–≤–µ—Ä, –Ω–∞–ø—Ä–∏–º–µ—Ä, –Ω–∞ render.com, –≤—ã–ø–æ–ª–Ω–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ. –í –∫–∞—á–µ—Å—Ç–≤–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ç–æ–≥–æ, —á—Ç–æ –≤—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–¥–µ–ø–ª–æ–∏–ª–∏ –±–æ—Ç–∞, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç —Å –ª–æ–≥–∞–º–∏, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º –±—É–¥–µ—Ç –≤–∏–¥–Ω–æ, —á—Ç–æ build –±—ã–ª —É—Å–ø–µ—à–µ–Ω. –í –∏–¥–µ–∞–ª–µ, —á—Ç–æ–±—ã –±—ã–ª–∏ –ø–æ–∫–∞–∑–∞–Ω—ã –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã, –∫–æ—Ç–æ—Ä—ã–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã –±—É–¥–µ—Ç–µ –ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å —Å –ø–æ–º–æ—â—å—é, –Ω–∞–ø—Ä–∏–º–µ—Ä, middleware, –∫–∞–∫ –Ω–∞ –ª–µ–∫—Ü–∏–∏ ‚Äì 1 –±–∞–ª–ª.
# ‚úÖ –ì—Ä–∞—Ñ–∏–∫–∏: –ü–æ—Å—Ç—Ä–æ–π—Ç–µ –≥—Ä–∞—Ñ–∏–∫–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–æ –≤–æ–¥–µ –∏ –∫–∞–ª–æ—Ä–∏—è–º –∏ —Ä–µ–∞–ª–∏–∑—É–π—Ç–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –±–æ—Ç–∞ –¥–ª—è –ø–æ–∫–∞ —ç—Ç–∏—Ö –≥—Ä–∞—Ñ–∏–∫–æ–≤ (–º–∞–∫—Å + 2 –±–∞–ª–ª–∞).
# ‚ùå –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏: –ë–æ—Ç –º–æ–∂–µ—Ç –ø—Ä–µ–¥–ª–∞–≥–∞—Ç—å –ø—Ä–æ–¥—É–∫—Ç—ã —Å –Ω–∏–∑–∫–∏–º —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ–º –∫–∞–ª–æ—Ä–∏–π –∏–ª–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ü–µ–ª–µ–π (–º–∞–∫—Å + 1 –±–∞–ª–ª, –ª–æ–≥–∏–∫—É –º–æ–∂–µ—Ç–µ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –ª—é–±—É—é).
# ‚ùå –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç–∏: –ú–æ–∂–µ—Ç–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –∫–∞–∫–æ–π-—Ç–æ –±–æ–ª–µ–µ —É–º–Ω—ã–π —Å–ø–æ—Å–æ–± –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç–∏ –ø—Ä–æ–¥—É–∫—Ç–∞ (–º–∞–∫—Å + 2 –±–∞–ª–ª–∞).

### ‚úÖ –¥–æ–±–∞–≤–∏—Ç—å \help –∏ –≤—ã–≤–æ–¥ –ø–æ–¥—Å–∫–∞–∑–∫–∏ –ø—Ä–æ help –ø–æ—Å–ª–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è
### ‚úÖ –≤–Ω–µ—Å—Ç–∏ –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞
### ‚úÖ –≤–æ–æ–±—â–µ –ø–æ–¥—É–º–∞—Ç—å –Ω–∞–¥ —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è–º–∏ —Ç–µ–∫—Å—Ç–∞ —Å–æ —Å—Ç–æ—Ä–æ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
### ‚úÖ –¥–æ–±–∞–≤–∏—Ç—å —É—á–µ—Ç –≤–æ–¥—ã
### ‚úÖ –¥–æ–±–∞–≤–∏—Ç—å —É—á–µ—Ç —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ - /log_workout <—Ç–∏–ø —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏> <–≤—Ä–µ–º—è (–º–∏–Ω)>:
### ### ‚úÖ —É—á–µ—Ç —Å–æ–∂–∂–µ–Ω—ã—Ö –∫–∞–ª–æ—Ä–∏–π / –≤–æ–¥—ã?
### ‚úÖ –ø–æ–¥—É–º–∞—Ç—å –Ω–∞–¥ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–º –≥—Ä–∞—Ñ–∏–∫–æ–º –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ (–¥–∏–Ω–∞–º–∏–∫–∞, —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ)
### ‚úÖ —Å–ø—Ä–∞—à–∏–≤–∞—Ç—å —Ü–µ–ª—å –ø–æ –∫–∞–ª–æ—Ä–∏—è–º –∏ —Å–¥–µ–ª–∞—Ç—å –¥–µ—Ñ–æ–ª—Ç–Ω—É—é —Ü–µ–ª—å
### ‚úÖ —Å–ø—Ä–∞—à–∏–≤–∞—Ç—å —Ü–µ–ª—å –ø–æ –≤–æ–¥–µ –∏ —Ç–æ–∂–µ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –Ω–æ—Ä–º—É –≤–æ–¥—ã –∫–∞–∫ –¥–µ—Ñ–æ–ª—Ç

### –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
### ### –∑–∞–º–µ–Ω–∏–ª –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤ –¥–µ–Ω—å –Ω–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞–º, –∏–Ω–∞—á–µ —Å–ª–∏—à–∫–æ–º —Ä–∞—Å–ø–ª—ã–≤—á–∞—Ç–æ
### ### –∫–∞–ª–æ—Ä–∞–∂ –æ–±—ã—á–Ω–æ —É—á–∏—Ç—ã–≤–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å, —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –Ω–µ –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ –º–æ–∂–Ω–æ –±–æ–ª—å—à–µ –µ—Å—Ç—å –≤ —ç—Ç–æ—Ç –¥–µ–Ω—å... (–Ω–æ –ª–æ–≥–∏–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –≤ —Å–≤—è–∑–∏ —Å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–æ–π —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ —Å –≤–æ–¥–æ–π)
### ### –≤ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–∏ –≤–æ–¥—ã –Ω–µ —É–∫–∞–∑—ã–≤–∞—é, —Å–∫–æ–ª—å–∫–æ –¥–æ –Ω–æ—Ä–º—ã, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª —É–∂–µ –µ—Å—Ç—å –≤ —á–µ–∫–ø—Ä–æ–≥—Ä–µ—Å—Å–µ

### –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏
### ### –∑–∞–ø—Ä–∞—à–∏–≤–∞—é: –ø–æ–ª, –≤–æ–∑—Ä–∞—Å—Ç, —Ä–æ—Å—Ç, —Ç–µ–∫—É—â–∏–π –≤–µ—Å, —Ü–µ–ª–µ–≤–æ–π –≤–µ—Å, —É—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏, –≥–æ—Ä–æ–¥
### ### –º–æ–∂–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å –ª–∏—á–Ω—ã–µ —Ü–µ–ª–∏ –ø–æ –∫–∞–ª–æ—Ä–∏—è–º –∏ –≤–µ—Å—É, –∏–ª–∏ –ø–æ –¥–µ—Ñ–æ–ª—Ç—É –±–æ—Ç —Å—á–∏—Ç–∞–µ—Ç –Ω–æ—Ä–º—ã —Å —É—á–µ—Ç–æ–º –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
### ### –µ—Å—Ç—å —Å–ø—Ä–∞–≤–∫–∞
### ### –µ—Å—Ç—å —Å–ø—Ä–∞–≤–∫–∞

# –î–µ–ø–ª–æ–π, –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ